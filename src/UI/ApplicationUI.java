package UI;

import classes.Coin;
import classes.Machine;
import classes.Product;
import exceptions.NotEnoughChangeException;
import exceptions.NotEnoughMoneyException;
import java.text.DecimalFormat;
import java.util.Collection;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import services.Dispenser;

/**
 * Entry application for testing purposes.
 * I did this super quick to provide a way to test. No real effort into
 * this form.
 * @author Kenneth
 */
public class ApplicationUI extends javax.swing.JFrame {

    private Machine m = new Machine(new Dispenser());
    private String limitedChangeEnabledText = "Limited change is enabled";
    private String limitedChangeDiabledText = "Limited change is diabled";

    public ApplicationUI() {
        super("Vending machine");
        initComponents();
        loadSettings();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlApplication = new javax.swing.JPanel();
        scpreturnChangeList = new javax.swing.JScrollPane();
        returnChangeList = new javax.swing.JList<>();
        scpproductList = new javax.swing.JScrollPane();
        productList = new javax.swing.JList<>();
        lblNotice01 = new javax.swing.JLabel();
        lblNotice02 = new javax.swing.JLabel();
        txtPence = new javax.swing.JTextField();
        cmdPurchase = new javax.swing.JButton();
        lblRetunedChange = new javax.swing.JLabel();
        pnlSettings = new javax.swing.JPanel();
        scpConfigList = new javax.swing.JScrollPane();
        configList = new javax.swing.JList<>();
        tglLimitedchange = new javax.swing.JToggleButton();
        lblLimitedChange = new javax.swing.JLabel();
        lblNotice03 = new javax.swing.JLabel();
        lblNotice04 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlApplication.setBorder(javax.swing.BorderFactory.createTitledBorder("Application"));

        returnChangeList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        scpreturnChangeList.setViewportView(returnChangeList);

        productList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        productList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                productListValueChanged(evt);
            }
        });
        scpproductList.setViewportView(productList);

        lblNotice01.setText("Select a product");

        lblNotice02.setText("<html>\nEnter amount in pence (12.50 as 1250)<br>\nand click \"Purchase\"\n<html>");

        txtPence.setEnabled(false);
        txtPence.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPenceKeyReleased(evt);
            }
        });

        cmdPurchase.setEnabled(false);
        cmdPurchase.setLabel("Purchase");
        cmdPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPurchaseActionPerformed(evt);
            }
        });

        lblRetunedChange.setText(" ");

        javax.swing.GroupLayout pnlApplicationLayout = new javax.swing.GroupLayout(pnlApplication);
        pnlApplication.setLayout(pnlApplicationLayout);
        pnlApplicationLayout.setHorizontalGroup(
            pnlApplicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlApplicationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlApplicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNotice02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlApplicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(scpproductList)
                        .addGroup(pnlApplicationLayout.createSequentialGroup()
                            .addComponent(txtPence, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmdPurchase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(scpreturnChangeList, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblNotice01)
                    .addComponent(lblRetunedChange))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlApplicationLayout.setVerticalGroup(
            pnlApplicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlApplicationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblNotice01)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpproductList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(lblNotice02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlApplicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdPurchase))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpreturnChangeList, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRetunedChange)
                .addContainerGap())
        );

        cmdPurchase.getAccessibleContext().setAccessibleName("button1");

        pnlSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        configList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        configList.setFocusable(false);
        configList.setRequestFocusEnabled(false);
        scpConfigList.setViewportView(configList);

        tglLimitedchange.setText("Limited Change");
        tglLimitedchange.setBorderPainted(false);
        tglLimitedchange.setFocusPainted(false);
        tglLimitedchange.setFocusable(false);
        tglLimitedchange.setRolloverEnabled(false);
        tglLimitedchange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglLimitedchangeActionPerformed(evt);
            }
        });

        lblLimitedChange.setText("Limited change is diabled.");

        lblNotice03.setText("Config file view");

        lblNotice04.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNotice04.setText("Change left: ");

        javax.swing.GroupLayout pnlSettingsLayout = new javax.swing.GroupLayout(pnlSettings);
        pnlSettings.setLayout(pnlSettingsLayout);
        pnlSettingsLayout.setHorizontalGroup(
            pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scpConfigList)
                    .addComponent(tglLimitedchange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlSettingsLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(lblLimitedChange)
                        .addGap(0, 33, Short.MAX_VALUE))
                    .addGroup(pnlSettingsLayout.createSequentialGroup()
                        .addComponent(lblNotice03)
                        .addGap(18, 18, 18)
                        .addComponent(lblNotice04, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlSettingsLayout.setVerticalGroup(
            pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tglLimitedchange)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblLimitedChange)
                .addGap(29, 29, 29)
                .addGroup(pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNotice03)
                    .addComponent(lblNotice04))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpConfigList, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblNotice03.getAccessibleContext().setAccessibleName("Config file view");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlApplication, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlApplication, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(557, 471));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPurchaseActionPerformed
        if (tglLimitedchange.isSelected()) {
            try {
                updateChangeUI(m.getDispenser().getChangeFor(Integer.parseInt(
                        txtPence.getText()),
                        m.getMenu().get(productList.getSelectedIndex())));
                loadConfigUI();
                updateRemainingChange();
            } catch (NotEnoughChangeException | NotEnoughMoneyException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
            }
        } else {
            try {
                updateChangeUI(m.getDispenser().getOptimalChangeFor(Integer.parseInt(
                        txtPence.getText()),
                        m.getMenu().get(productList.getSelectedIndex())));
            } catch (NotEnoughMoneyException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
            }
        }
    }//GEN-LAST:event_cmdPurchaseActionPerformed

    private void tglLimitedchangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglLimitedchangeActionPerformed
        if (tglLimitedchange.isSelected()) {
            lblLimitedChange.setText(limitedChangeEnabledText);
        } else {
            lblLimitedChange.setText(limitedChangeDiabledText);
        }
    }//GEN-LAST:event_tglLimitedchangeActionPerformed

    private void productListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_productListValueChanged
        txtPence.setEnabled(true);
    }//GEN-LAST:event_productListValueChanged

    private void txtPenceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPenceKeyReleased
        String regex = "\\d+";
        if (txtPence.getText().matches(regex)) {
            cmdPurchase.setEnabled(true);
        } else {
            cmdPurchase.setEnabled(false);
        }
    }//GEN-LAST:event_txtPenceKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApplicationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApplicationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApplicationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApplicationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApplicationUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdPurchase;
    private javax.swing.JList<String> configList;
    private javax.swing.JLabel lblLimitedChange;
    private javax.swing.JLabel lblNotice01;
    private javax.swing.JLabel lblNotice02;
    private javax.swing.JLabel lblNotice03;
    private javax.swing.JLabel lblNotice04;
    private javax.swing.JLabel lblRetunedChange;
    private javax.swing.JPanel pnlApplication;
    private javax.swing.JPanel pnlSettings;
    private javax.swing.JList<String> productList;
    private javax.swing.JList<String> returnChangeList;
    private javax.swing.JScrollPane scpConfigList;
    private javax.swing.JScrollPane scpproductList;
    private javax.swing.JScrollPane scpreturnChangeList;
    private javax.swing.JToggleButton tglLimitedchange;
    private javax.swing.JTextField txtPence;
    // End of variables declaration//GEN-END:variables

    private void loadSettings() {
        loadProductList();
        loadConfigUI();
        updateRemainingChange();
        clearChangeUI();
    }

    private void loadProductList() {
        DefaultListModel listModel = new DefaultListModel();
        productList.setModel(listModel);
        DecimalFormat df = new DecimalFormat("0.00");
        for (Product p : m.getMenu()) {
            listModel.addElement(p.getProductName() + " (" + df.format((float) p.getProductPrice() / 100) + ")");
        }
    }

    private void updateChangeUI(Collection<Coin> change) {
        DefaultListModel listModel = new DefaultListModel();
        returnChangeList.setModel(listModel);
        for (Coin coin : change) {
            listModel.addElement(coin);
        }
    }

    private void loadConfigUI() {

        m.getDispenser().loadConfig();

        DefaultListModel listModel = new DefaultListModel();
        configList.setModel(listModel);

        for (Map.Entry<Coin, Integer> config : m.getDispenser().getAvailableChangeMachine().entrySet()) {
            listModel.addElement(config);
        }
    }

    private void updateRemainingChange() {
        DecimalFormat df = new DecimalFormat("0.00");
        lblNotice04.setText("Change left: " + df.format((float) m.getDispenser().getTotalChangeInMachine() / 100));
    }

    private void clearChangeUI() {

        DefaultListModel listModel = new DefaultListModel();
        returnChangeList.setModel(listModel);

        listModel.removeAllElements();
    }
}
